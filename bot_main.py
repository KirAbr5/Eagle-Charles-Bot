from telegram.ext import ApplicationBuilder, MessageHandler, filters, CallbackQueryHandler, CommandHandler, Updater, \
    Application, ContextTypes

# pip install python-telegram-bot
# pip install openai

from gpt import *
from util import *
import random

async def start(update, context):
    dialog.mode = "main"
    text = load_message("main")
    await send_photo(update, context, "avatar_bot2")
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        "start": "–ú–µ–Ω—é –±–æ—Ç–∞ üåç",
        "gpt": "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ChatGPT?) üß†",
        "date": "–ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ üî•",
        "message": "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç —á—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç üòà",
        "profile": "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é üòé",
        "opener": "–ù–∞–ø–∏—à–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ü•∞",
        "bye": "–ü–æ–∫–∞?...üéÄ",
        "add": "–î–æ–±–∞–≤–∏—Ç –≤–∞—à—É –∑–∞–¥–∞—á—É –Ω–∞ –¥–µ–Ω—å üìä",
        "show": "–ü–æ–∫–∞–∂–µ—Ç –≤–∞—à–∏ –∑–∞–¥–∞—á–∏ üì©",
        "random": "–î–æ–±–∞–≤–∏—Ç —Ä–∞–Ω–¥–æ–º–Ω—É—é –∑–∞–¥–∞—á—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ü§°"
    })


tasks = {}

RANDOM_TASKS = ["–°–æ–ª–Ω–µ—á–Ω—ã–µ –≤–∞–Ω–Ω—ã", "–°–∫–∞–ª–æ–ª–∞–∑–∞–Ω–∏–µ", "–ë–µ–π—Å–±–æ–ª", "–ö–∞—Ç–∞–Ω–∏–µ –Ω–∞ —Å–Ω–æ—É–±–æ—Ä–¥–µ", "–°–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ", "–ö—Ä–∏–∫–µ—Ç",
                "–ö–∞—Ç–∞–Ω–∏–µ –Ω–∞ –≥–∏–¥—Ä–æ—Ü–∏–∫–ª–µ", "–ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∑–≤–µ–∑–¥–∞–º–∏"]


def add_todo(date, task):
    if date in tasks:
        tasks[date].append(task)
    else:
        tasks[date] = []
        tasks[date].append(task)


async def add(update, context):
    command = update.message.text.split(maxsplit=2)
    date = command[1]
    task = command[2]
    add_todo(date, task)
    text = "–ó–∞–¥–∞—á–∞ " + task + " –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ –¥–∞—Ç—É " + date
    await send_text(update, context, text)


async def show(update, context):
    command = update.message.text.split(maxsplit=1)
    date = command[1]
    text = ""
    if date in tasks:
        text = date + "\n"
        for task in tasks[date]:
            text = text + " „Éª " + task + "\n"
    else:
        text = "–ó–∞–¥–∞—á–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç, –æ—Ç–¥—ã—Ö–∞–π—Ç–µ üòé"
    await send_text(update, context, text)


async def random_add(update, context):
    date = "—Å–µ–≥–æ–¥–Ω—è"
    task = random.choice(RANDOM_TASKS)
    add_todo(date, task)
    text = "–ó–∞–¥–∞—á–∞ " + task + " –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ " + date
    await send_text(update, context, text)


async def gpt(update, context):
    dialog.mode = "gpt"
    text = load_message("gpt")
    await send_photo(update, context, "gpt")
    await send_text(update, context, text)


async def gpt_dialog(update, context):
    text = update.message.text
    prompt = load_prompt("gpt")
    answer = await chatgpt.send_question(prompt, text)
    await send_text(update, context, answer)


async def date(update, context):
    dialog.mode = "date"
    text = load_message("date")
    await send_photo(update, context, "date")
    await send_text_buttons(update, context, text, {
        "date_harry": "–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä",
        "date_vader": "–î–∞—Ä—Ç –í–µ–π–¥–µ—Ä",
        "date_hermione": "–ì–µ—Ä–º–∏–æ–Ω–∞",
        "date_jack": "–î–∂–µ–∫ –í–æ—Ä–æ–±–µ–π"
    })


async def date_dialog(update, context):
    text = update.message.text
    my_message = await send_text(update, context, "_–Ω–∞–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ..._")
    answer = await chatgpt.add_message(text)
    await my_message.edit_text(answer)

async def date_button(update, context):
    query = update.callback_query.data
    await update.callback_query.answer()
    await send_photo(update, context, query)
    await send_text(update, context, "–û—Ç–ª–∏—á–Ω–æ! –ú–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è)")
    prompt = load_prompt(query)
    chatgpt.set_prompt(prompt)


async def message(update, context):
    dialog.mode = "message"
    text = load_message("message")
    await send_photo(update, context,"gpt")
    await send_text_buttons(update, context, text, {
        "message_next": "–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "message_date": "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ –¥–∏–∞–ª–æ–≥"
    })
    dialog.list.clear()


async def message_button(update, context):
    query = update.callback_query.data
    await update.callback_query.answer()
    prompt = load_prompt(query)
    user_chat_history = "\n\n".join(dialog.list)
    my_message = await send_text(update, context, "_ChatGPT üß† –¥—É–º–∞–µ—Ç –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º..._")
    answer = await chatgpt.send_question(prompt, user_chat_history)
    await my_message.edit_text(answer)


async def message_dialog(update, context):
    text = update.message.text
    dialog.list.append(text)


async def profile(update, context):
    dialog.mode = "profile"
    text = load_message("profile")
    await send_photo(update, context, "profile")
    await send_text(update, context, text)
    dialog.user.clear()
    dialog.count = 0
    await send_text(update, context, "–í–∞—à–µ –∏–º—è?")


async def profile_dialog(update, context):
    text = update.message.text
    dialog.count +=1
    if dialog.count == 1:
        dialog.user["name"] = text
        await send_text(update, context, "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    if dialog.count == 2:
        dialog.user["age"] = text
        await send_text(update, context, "–ö–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –∏ –∫–∞–∫–æ–µ —Ö–æ–±–±–∏?")
    if dialog.count == 3:
        dialog.user["work"] = text
        prompt = load_prompt("profile")
        user_info = dialog_user_info_to_str(dialog.user)
        my_message = await send_text(update, context, "_ChatGPT üß† –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è..._")
        answer = await chatgpt.send_question(prompt, user_info)
        await my_message.edit_text(answer)


async def opener(update, context):
    dialog.mode = "opener"
    text = load_message("opener")
    await send_photo(update, context, "opener")
    await send_text(update, context, text)
    dialog.user.clear()
    dialog.count = 0
    await send_text(update, context, "–ö–∞–∫ –∑–æ–≤—É—Ç —á–µ–ª–æ–≤–µ–∫–∞?")


async def opener_dialog(update, context):
    text = update.message.text
    dialog.count += 1
    if dialog.count == 1:
        dialog.user["name"] = text
        await send_text(update, context, "–°–∫–æ–ª—å–∫–æ –µ–º—É –ª–µ—Ç?")
    if dialog.count == 2:
        dialog.user["age"] = text
        await send_text(update, context, "–ö–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –∫–∞–∫–æ–µ —Ö–æ–±–±–∏?")
    if dialog.count == 3:
        dialog.user["work"] = text
        prompt = load_prompt("opener")
        user_info = dialog_user_info_to_str(dialog.user)
        my_message = await send_text(update, context, "_ChatGPT üß† –¥—É–º–∞–µ—Ç –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º..._")
        answer = await chatgpt.send_question(prompt, user_info)
        await my_message.edit_text(answer)


async def bye(update, context):
    text = ("–ü–æ–∫–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!")
    txt = ("–ï—â–µ —É–≤–∏–¥–µ–º—Å—è! –¢–≤–æ–π –ß–∞—Ä–ª—å–∑ üî•")
    await send_text(update, context, text)
    await send_photo(update, context, "avatar_bot")
    await send_text(update, context, txt)


async def common(update, context):
    if dialog.mode == "gpt":
        await gpt_dialog(update, context)
    elif dialog.mode == "date":
        await date_dialog(update, context)
    elif dialog.mode == "message":
        await message_dialog(update, context)
    elif dialog.mode == "profile":
        await profile_dialog(update, context)
    elif dialog.mode == "opener":
        await opener_dialog(update, context)
    else:
        await send_text(update, context, "*–ü—Ä–∏–≤–µ—Ç!*")
        await send_text_buttons(update, context, "–ö–∞–∫ —É –≤–∞—Å –¥–µ–ª–∞?", {
            "emote_good": "–•–æ—Ä–æ—à–æ üòÜ",
            "emote_bad": "–ü–ª–æ—Ö–æ üò∂‚Äçüå´Ô∏è"})


async def emote(update, context):
    query = update.callback_query.data
    if query == "emote_good":
        await send_text(update, context, "–£—Ä–∞! –Ø —Ä–∞–¥, –æ—Ç–ª–∏—á–Ω–æ–≥–æ –≤–∞–º –¥–Ω—è)")
        await send_photo(update, context, "happy")
    elif query == "emote_bad":
        await send_text(update, context, "–ü–µ—á–∞–ª—å–Ω–æ( –ù–æ –≥–ª–∞–≤–Ω–æ–µ –ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –≤—Å–µ –ª—É—á—à–µ–µ –≤–ø–µ—Ä–µ–¥–∏! –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?")
        await send_photo(update, context, "sad")


dialog = Dialog()
dialog.mode = None
dialog.list = []
dialog.count = 0
dialog.user = {}

chatgpt = ChatGptService(token="")

app = ApplicationBuilder().token("").build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("add", add))
app.add_handler(CommandHandler("show", show))
app.add_handler(CommandHandler("random", random_add))
app.add_handler(CommandHandler("gpt", gpt))
app.add_handler(CommandHandler("date", date))
app.add_handler(CommandHandler("message", message))
app.add_handler(CommandHandler("profile", profile))
app.add_handler(CommandHandler("opener", opener))
app.add_handler(CommandHandler("bye", bye))

app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, common))

app.add_handler(CallbackQueryHandler(date_button, pattern="^date_.*"))
app.add_handler(CallbackQueryHandler(message_button, pattern="^message_.*"))
app.add_handler(CallbackQueryHandler(emote))

app.run_polling()
